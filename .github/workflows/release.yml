name: release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  pull-requests: read
  contents: write

jobs:
  check-release-label:
    runs-on: ubuntu-latest
    outputs:
      has_release_label: ${{ steps.check-label.outputs.has_release_label }}
    steps:
      # 最新のPRにreleaseラベルが付いているかチェック
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check release label
        id: check-label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 最新のマージされたPRを取得
          PR_NUMBER=$(gh pr list --base main --state merged --limit 1 --json number --jq ".[0].number")

          # PRのラベルを取得
          LABELS=$(gh pr view $PR_NUMBER --json labels --jq ".labels[].name")

          # releaseラベルが付いているかの判定結果を出力
          if echo $LABELS | grep -q "release"; then
            echo "has_release_label=true" >> $GITHUB_OUTPUT
          else
          echo "has_release_label=false" >> $GITHUB_OUTPUT
          fi

  release:
    runs-on: ubuntu-latest
    needs:
      - check-release-label
    # releaseラベルが付いているPRがマージされたときのみ実行
    if: needs.check-release-label.outputs.has_release_label == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build Pacakge
        run: yarn build

      - name: Set New Version And Release Tag
        run: |
          NEW_VERSION=$(node -pe "require('./package.json').version")
          echo "NEW_VERSION=v${NEW_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_TAG=v${NEW_VERSION}" >> $GITHUB_ENV

      - name: Publish Package
        run: |
          echo "publish package"
          echo "command like 'yarn publish --verbose --access public --tag ${{ env.RELEASE_TAG }}'"

      # アップデート後のバージョンのタグを生成してプッシュ
      - name: push new version tag
        run: |
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

      # リリースノートを生成して最新バージョンのアプリケーションを添付
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          tag_name: ${{ env.RELEASE_TAG }}
          generate_release_notes: true
